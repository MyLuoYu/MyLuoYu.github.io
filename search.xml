<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux常用命令</title>
    <url>/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>    本文撰写的目的是为了使刚接触Linux的小白更好的操作使用Linux，以及作为个人的备忘录。文章介绍的命令是本在Linux系统日常使用中常用到的，或者是在服务器上开发所用到的高频率命令。</p>
<span id="more"></span>

<h1 id="切换目录：cd"><a href="#切换目录：cd" class="headerlink" title="切换目录：cd"></a>切换目录：cd</h1><h2 id="cd命令格式"><a href="#cd命令格式" class="headerlink" title="cd命令格式"></a>cd命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> [目录路径]</span><br></pre></td></tr></table></figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p><strong>[目录路径]</strong> 可以是绝对路径也可以是相对路径，常见的相对路径有：</p>
<ul>
<li><p>.&#x2F;    表示当前目录</p>
</li>
<li><p>..&#x2F;   表示上一级目录</p>
</li>
<li><p>~    表示用户主目录（&#x2F;home&#x2F;user）</p>
</li>
<li><p>-    表示上一次工作路径</p>
</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>进入根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></table></figure>

<p>进入 “home” 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure>

<p>进入上一次工作路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>

<p>进入上一级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>



<h1 id="查询当前目录路径：pwd"><a href="#查询当前目录路径：pwd" class="headerlink" title="查询当前目录路径：pwd"></a>查询当前目录路径：pwd</h1><blockquote>
<p>这是一个相当常用的命令，一般在写配置文件时常常要指定一个目录或者文件。<br>所以，会在写文件时候提前wpd显示目录路径进行复制。</p>
</blockquote>
<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展-1"><a href="#拓展-1" class="headerlink" title="拓展"></a>拓展</h2><p>在<em>终端</em>中的<u><strong>复制</strong></u>快捷键是：Ctrl + Shift + C<br>在<em>终端</em>中的<strong>粘贴</strong>快捷键是：Ctrl + Shift + V</p>
<h1 id="查询文件命令：ls"><a href="#查询文件命令：ls" class="headerlink" title="查询文件命令：ls"></a>查询文件命令：ls</h1><h2 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h2><p>不加 <strong>[目录路径]</strong> 默认为当前目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> [目录路径]</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li><strong>-l</strong>：除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</li>
<li><strong>-a</strong>：显示所有目录和文件（包括隐藏目录）</li>
<li><strong>-A</strong>：列出除.及..的其它文件</li>
<li><strong>-r</strong>：反序排列</li>
<li><strong>-S</strong>：以文件大小排序</li>
</ul>
<h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><p>按大小反序显示文件详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lrS</span><br></pre></td></tr></table></figure>

<p>按修改时间反序排序，并显示文件详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lrt</span><br></pre></td></tr></table></figure>

<p>列出当前目录中所有以”t”开头的目录的详细内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l t*</span><br></pre></td></tr></table></figure>

<p>列出文件绝对路径（不包含隐藏文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> | sed <span class="string">&quot;s:^:`pwd`/:&quot;</span></span><br></pre></td></tr></table></figure>



<h1 id="创建目录-文件夹-：mkdir"><a href="#创建目录-文件夹-：mkdir" class="headerlink" title="创建目录(文件夹)：mkdir"></a>创建目录(文件夹)：mkdir</h1><h2 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [参数] [目录名]</span><br></pre></td></tr></table></figure>

<h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><ul>
<li><strong>-m</strong>   ：对新建目录设置存取权限，也可以用 chmod 命令设置</li>
<li><strong>-p</strong>    ：可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</li>
</ul>
<h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h2><p>当前工作目录下创建名为 t的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> t</span><br></pre></td></tr></table></figure>

<p>在 tmp 目录下创建路径为 test&#x2F;t1&#x2F;t 的目录，若不存在，则创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/test/t1/t</span><br></pre></td></tr></table></figure>



<h1 id="删除命令：rm"><a href="#删除命令：rm" class="headerlink" title="删除命令：rm"></a>删除命令：rm</h1><h2 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> [选项] 文件(目录)…</span><br></pre></td></tr></table></figure>

<h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><ul>
<li><p><strong>-r</strong>    ：删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目</p>
</li>
<li><p><strong>-i</strong>    ：删除任何文件，删除前逐一询问确认</p>
</li>
<li><p><strong>-rf</strong>    ：删除子目录及子目录中所有档案删除，并且不用确认</p>
</li>
</ul>
<h2 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h2><p>删除任何 .log结尾的文件，删除前逐一询问确认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i *.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>删除以 -f 开头的文件</p>
<blockquote>
<p>文件（目录）以 “-”开头会让命令误认为是参数，所以加上“–“进行分隔</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -- -f*</span><br></pre></td></tr></table></figure>



<h1 id="移动-重命名-：mv"><a href="#移动-重命名-：mv" class="headerlink" title="移动(重命名)：mv"></a>移动(重命名)：mv</h1><blockquote>
<p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p>
<p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p>
</blockquote>
<h2 id="命令格式-4"><a href="#命令格式-4" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> [文件(目录)] [文件(目录)]</span><br></pre></td></tr></table></figure>

<h2 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h2><ul>
<li><strong>-i</strong>    :是否询问覆盖</li>
</ul>
<h2 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h2><p>将文件 test.log 重命名为 test1.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> test.log test1.txt</span><br></pre></td></tr></table></figure>

<p>将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> llog1.txt log2.txt log3.txt /test3</span><br></pre></td></tr></table></figure>

<p>将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p>
<blockquote>
<p>不加参数-i则强制覆盖</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> -i log1.txt log2.txt</span><br></pre></td></tr></table></figure>

<p>移动当前文件夹下的所有文件到上一级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> * ../</span><br></pre></td></tr></table></figure>



<h1 id="文件-目录-查找：find"><a href="#文件-目录-查找：find" class="headerlink" title="文件(目录)查找：find"></a>文件(目录)查找：find</h1><blockquote>
<p>Linux find 命令用来在指定目录下查找文件。任何位于<strong>参数之前</strong>的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
</blockquote>
<h2 id="命令格式-5"><a href="#命令格式-5" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find   [path]   [-option]  [-expression]</span><br></pre></td></tr></table></figure>

<h2 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h2><blockquote>
<p>find 根据下列规则判断 path 和 expression，在命令列上第一个 -option 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。</p>
</blockquote>
<ul>
<li><p>-amin n : 在过去 n 分钟内被读取过</p>
</li>
<li><p>-atime n : 在过去 n 天内被读取过的文件</p>
</li>
<li><p>-cmin n : 在过去 n 分钟内被修改过</p>
</li>
<li><p>-mtime n : 在过去 n 天内修改过的文件</p>
</li>
<li><p>-ctime n : 在过去 n 天内创建的文件</p>
</li>
<li><p>-name [name] : 文件名称符合 [name] 的文件</p>
</li>
<li><p>-iname [name] : 文件名称符合 [name] 的文件iname 会忽略大小写</p>
</li>
<li><p>-type [type] : 文件类型是 [type] 的文件</p>
<ul>
<li><p>c 类型的文件。</p>
</li>
<li><p>d: 目录</p>
</li>
<li><p>f: 一般文件</p>
</li>
<li><p>l: 符号连结</p>
</li>
</ul>
</li>
</ul>
<h2 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h2><p>将当前目录及其子目录下所有文件后缀为 .c 的文件列出来:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.c&quot;</span></span><br></pre></td></tr></table></figure>

<p>将当前目录及其子目录中的所有文件列出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure>

<p>将当前目录及其子目录下所有最近 20 天内更新过的文件列出:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -ctime 20</span><br></pre></td></tr></table></figure>



<h1 id="内容查找命令：grep"><a href="#内容查找命令：grep" class="headerlink" title="内容查找命令：grep"></a>内容查找命令：grep</h1><blockquote>
<p>grep 命令用于查找文件里符合条件的字符串。</p>
<p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。</p>
</blockquote>
<h2 id="命令格式-6"><a href="#命令格式-6" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep [范本样式] [参数] [path...]</span><br></pre></td></tr></table></figure>

<h2 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h2><ul>
<li><strong>-E</strong> 或 <strong>–extended-regexp</strong>: 将样式为延伸的正则表达式来使用。</li>
<li><strong>-i</strong> 或 <strong>–ignore-case</strong> : 忽略字符大小写的差别。</li>
<li><strong>-l</strong> 或 <strong>–file-with-matches</strong> : 列出文件内容符合指定的样式的文件名称。</li>
<li><strong>-L</strong> 或 <strong>–files-without-match</strong> : 列出文件内容不符合指定的样式的文件名称。</li>
<li><strong>-r 或 –recursive</strong> : 此参数的效果和指定”-d recurse”参数相同。</li>
<li><strong>-v</strong> 或 <strong>–invert-match</strong> : 显示不包含匹配文本的所有行。</li>
<li><strong>-x</strong> 或 <strong>–line-regexp</strong> : 只显示全行符合的行。</li>
</ul>
<h2 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h2><p>在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="built_in">test</span> *file </span><br></pre></td></tr></table></figure>

<p>以递归的方式查找符合条件的文件。例如，查找指定目录&#x2F;etc&#x2F;acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串”update”的文件，并打印出该字符串所在行的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r update /etc/acpi </span><br></pre></td></tr></table></figure>

<p>反向查找。前面各个例子是查找并打印出符合条件的行，通过”-v”参数可以打印出不符合条件行的内容。查找文件名中包含 test 的文件中不包含test 的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -v <span class="built_in">test</span> *<span class="built_in">test</span>*</span><br></pre></td></tr></table></figure>



<h1 id="文本处理：awk"><a href="#文本处理：awk" class="headerlink" title="文本处理：awk"></a>文本处理：awk</h1><blockquote>
<p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。awk是一个强大的工具能处理多种应用场景，但最常用的情况是对一个文件安行进行分割提取。</p>
</blockquote>
<h2 id="命令格式-7"><a href="#命令格式-7" class="headerlink" title="命令格式"></a>命令格式</h2><blockquote>
<p>对file以空格或者Tab分割，提取第？个数值。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [参数] <span class="string">&#x27;&#123;print $?,$?&#125;&#x27;</span> [file]</span><br></pre></td></tr></table></figure>

<h2 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h2><ul>
<li>-F ： 指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</li>
</ul>
<h2 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h2><p>行匹配语句 awk ‘’ 只能用单引号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;[pattern] action&#125;&#x27;</span> &#123;filenames&#125; </span><br></pre></td></tr></table></figure>

<p>每行按空格或TAB分割，输出文本中的1、4项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print $1,$4&#125;&#x27;</span> log.txt</span><br></pre></td></tr></table></figure>

<p> 使用”,”分割</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F, <span class="string">&#x27;&#123;print $1,$2&#125;&#x27;</span>   log.txt</span><br></pre></td></tr></table></figure>

<p>使用多个分隔符.先使用空格分割，然后对分割结果再使用”,”分割</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&#x27;[ ,]&#x27;</span>  <span class="string">&#x27;&#123;print $1,$2,$5&#125;&#x27;</span>   log.txt</span><br></pre></td></tr></table></figure>



<h1 id="管道符："><a href="#管道符：" class="headerlink" title="管道符：|"></a>管道符：|</h1><blockquote>
<p>管道符的作用是将上一个命令的输出转为下一个命令的输入，通过使用|（管道）符号，我们能重定向<strong>stdout</strong>流。管道符通常与grep、awk、find连用。</p>
</blockquote>
<h2 id="命令格式-8"><a href="#命令格式-8" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[命令] | [命令]</span><br></pre></td></tr></table></figure>

<h2 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h2><p>查找 xset q 命令 包含Caps Lock的行 并提取以空格或Tab分割的第4个元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xset q | grep <span class="string">&#x27;Caps Lock&#x27;</span> | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT知识</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro-i3wm安装</title>
    <url>/Manjaro-i3wm%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>    详细介绍Manjaro系统的i3wm桌面环境的安装与踩坑。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>manjaro i3其实是i3-gaps,i3wm的加强版,主要能使窗口间有间隔！而且下载完整版安装很多软件及配置，快捷键都默认设置好了  。<br>系统镜像在官网下载的社区版本manjaro+i3</p>
<h2 id="ISO镜像下载"><a href="#ISO镜像下载" class="headerlink" title="ISO镜像下载"></a>ISO镜像下载</h2><p><a href="https://manjaro.org/download/">下载网址</a>：<a href="https://manjaro.org/download/">https://manjaro.org/download/</a></p>
<p><img src="/Manjaro-i3wm%E5%AE%89%E8%A3%85/2022-08-13-21-01-55-image.png"></p>
<h2 id="刻录U盘"><a href="#刻录U盘" class="headerlink" title="刻录U盘"></a>刻录U盘</h2><h3 id="下载U盘刻录工具Rufus"><a href="#下载U盘刻录工具Rufus" class="headerlink" title="下载U盘刻录工具Rufus"></a>下载U盘刻录工具Rufus</h3><p><a href="https://rufus.en.softonic.com/">下载地址</a>：<a href="https://rufus.en.softonic.com/">https://rufus.en.softonic.com/</a></p>
<h3 id="Rufus使用"><a href="#Rufus使用" class="headerlink" title="Rufus使用"></a>Rufus使用</h3><h2 id="进入BIOS启动安装程序"><a href="#进入BIOS启动安装程序" class="headerlink" title="进入BIOS启动安装程序"></a>进入BIOS启动安装程序</h2><h2 id="安装Manjaro"><a href="#安装Manjaro" class="headerlink" title="安装Manjaro"></a>安装Manjaro</h2>]]></content>
      <categories>
        <category>IT知识</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>算法:剑指Offer</title>
    <url>/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87Offer/</url>
    <content><![CDATA[<p>    力扣算法题：剑指Offer。Java版本，算法解析和代码</p>
<span id="more"></span>

<h1 id="难度：简单"><a href="#难度：简单" class="headerlink" title="难度：简单"></a>难度：简单</h1><h2 id="数组中重复的数字-3"><a href="#数组中重复的数字-3" class="headerlink" title="数组中重复的数字-3"></a>数组中重复的数字-3</h2><blockquote>
<p>在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h3><p>题目只需要找到任意一个重复的数字，因此不需要使用排序的方法，也不需要使用额外的标记数组。可以将值为 i 的元素调整到第 i 个位置上，在不断替换排序的过程中寻找相同的数字，发现当前<u><strong>数字</strong></u>与<u><strong>数字下标</strong></u>数字相同时即中断程序。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || length &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果当前数字与下标符合，把当前 数字 与 当前数字下标值 交换</span></span><br><span class="line">            <span class="keyword">while</span> (nums[i] != i) &#123;</span><br><span class="line">                <span class="comment">// 如果发现当前 数字 与 数字下标值 相同，说明找到了重复数字</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] == nums[nums[i]]) &#123;</span><br><span class="line">                    <span class="keyword">return</span>  nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                swap(nums, i, nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两数交换方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="替换空格-5"><a href="#替换空格-5" class="headerlink" title="替换空格-5"></a>替换空格-5</h2><blockquote>
<p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof">https://leetcode.cn/problems/ti-huan-kong-ge-lcof</a></p>
</blockquote>
<h3 id="题解思路-1"><a href="#题解思路-1" class="headerlink" title="题解思路"></a>题解思路</h3><p>查找字符串的空格个数，并在其尾部添加相应的站位字符串，使之达到转换后的字符串长度。定义两个指针，P1指向原始字符串尾部下标，P2指向转换后字符串下标。判断P1是否为空格，如果为空格则把P2所指位置向前移动并修改其为替换字符串，如果不为空格则P2修改为P1所指的值。直到P1 &lt; 0或P1 &gt; P2</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String str)</span> &#123;</span><br><span class="line">		<span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str)</span><br><span class="line">		<span class="type">int</span> <span class="variable">P1</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= P1; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">				s.apped(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span> <span class="variable">P2</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 直到P1 &lt; 0或P1 &gt; P2,结束算法。</span></span><br><span class="line">		<span class="keyword">while</span> (P1 &gt;= <span class="number">0</span> &amp;&amp; P1 &lt;= P2) &#123;</span><br><span class="line">            <span class="comment">// 得到P1的值并向前移动一位</span></span><br><span class="line">			<span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(P1--)</span><br><span class="line">			<span class="keyword">if</span> ( c == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 把占位符替换为相应字符，并把P2向前移动</span></span><br><span class="line">				s.setCharAt(P2--, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">				s.setCharAt(P2--, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">				s.setCharAt(P2--, <span class="string">&#x27;%&#x27;</span>);				</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				s.setCharAt(P2--, c);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="难度：中等"><a href="#难度：中等" class="headerlink" title="难度：中等"></a>难度：中等</h1><h2 id="二维数组中的查找-4"><a href="#二维数组中的查找-4" class="headerlink" title="二维数组中的查找-4"></a>二维数组中的查找-4</h2><blockquote>
<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof">https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof</a></p>
</blockquote>
<h3 id="题解思路-2"><a href="#题解思路-2" class="headerlink" title="题解思路"></a>题解思路</h3><p>该二维数组中的一个数，小于它的数一定在其左边，大于它的数一定在其下边。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间，当前元素的查找区间为左下角的所有元素。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findNumberIn2DArray</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length, cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 从右上角开始</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>, c = cols - <span class="number">1</span>; <span class="comment">// 下标</span></span><br><span class="line">        <span class="keyword">while</span> (r &lt;= rows - <span class="number">1</span> &amp;&amp; c &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == matrix[r][c])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; matrix[r][c])</span><br><span class="line">                r++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                c--;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>剑指Offer</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
